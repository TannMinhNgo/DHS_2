#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script migration ƒë·ªÉ th√™m indexes v√†o database
Ch·∫°y: python migrate_database_indexes.py
"""

from app import create_app
from models import db
import sqlite3
import os

def add_database_indexes():
    """Th√™m indexes v√†o database ƒë·ªÉ c·∫£i thi·ªán performance"""
    app = create_app()
    with app.app_context():
        print("üîÑ ƒêang th√™m indexes v√†o database...")
        
        # K·∫øt n·ªëi tr·ª±c ti·∫øp ƒë·∫øn SQLite database
        db_path = app.config['SQLALCHEMY_DATABASE_URI'].replace('sqlite:///', '')
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()
        
        try:
            # Th√™m indexes cho b·∫£ng users
            indexes_users = [
                "CREATE INDEX IF NOT EXISTS idx_users_username ON users(username);",
                "CREATE INDEX IF NOT EXISTS idx_users_email ON users(email);",
                "CREATE INDEX IF NOT EXISTS idx_users_role ON users(role);",
                "CREATE INDEX IF NOT EXISTS idx_users_created_at ON users(created_at);"
            ]
            
            # Th√™m indexes cho b·∫£ng laptops
            indexes_laptops = [
                "CREATE INDEX IF NOT EXISTS idx_laptops_name ON laptops(name);",
                "CREATE INDEX IF NOT EXISTS idx_laptops_brand ON laptops(brand);",
                "CREATE INDEX IF NOT EXISTS idx_laptops_ram_gb ON laptops(ram_gb);",
                "CREATE INDEX IF NOT EXISTS idx_laptops_price ON laptops(price);",
                "CREATE INDEX IF NOT EXISTS idx_laptops_category ON laptops(category);",
                "CREATE INDEX IF NOT EXISTS idx_laptops_brand_category ON laptops(brand, category);",
                "CREATE INDEX IF NOT EXISTS idx_laptops_price_range ON laptops(price, category);"
            ]
            
            # Th√™m indexes cho b·∫£ng favorites
            indexes_favorites = [
                "CREATE INDEX IF NOT EXISTS idx_favorites_user_id ON favorites(user_id);",
                "CREATE INDEX IF NOT EXISTS idx_favorites_laptop_id ON favorites(laptop_id);",
                "CREATE INDEX IF NOT EXISTS idx_favorites_created_at ON favorites(created_at);"
            ]
            
            all_indexes = indexes_users + indexes_laptops + indexes_favorites
            
            for index_sql in all_indexes:
                cursor.execute(index_sql)
                print(f"‚úÖ {index_sql.split('idx_')[1].split(' ')[0]}")
            
            conn.commit()
            print("\nüéâ Ho√†n th√†nh! ƒê√£ th√™m t·∫•t c·∫£ indexes.")
            
            # Hi·ªÉn th·ªã th·ªëng k√™ indexes
            cursor.execute("SELECT name FROM sqlite_master WHERE type='index' AND name LIKE 'idx_%';")
            indexes = cursor.fetchall()
            print(f"\nüìä T·ªïng s·ªë indexes: {len(indexes)}")
            
        except Exception as e:
            print(f"‚ùå L·ªói khi th√™m indexes: {e}")
            conn.rollback()
        finally:
            conn.close()

def show_database_info():
    """Hi·ªÉn th·ªã th√¥ng tin database"""
    app = create_app()
    with app.app_context():
        db_path = app.config['SQLALCHEMY_DATABASE_URI'].replace('sqlite:///', '')
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()
        
        print("\nüìä TH√îNG TIN DATABASE:")
        print("=" * 50)
        
        # Th·ªëng k√™ b·∫£ng
        tables = ['users', 'laptops', 'favorites']
        for table in tables:
            cursor.execute(f"SELECT COUNT(*) FROM {table};")
            count = cursor.fetchone()[0]
            print(f"üìã {table}: {count} records")
        
        # Th·ªëng k√™ indexes
        cursor.execute("SELECT name FROM sqlite_master WHERE type='index' AND name LIKE 'idx_%';")
        indexes = cursor.fetchall()
        print(f"\nüîç Indexes: {len(indexes)}")
        for idx in indexes:
            print(f"   - {idx[0]}")
        
        conn.close()

def main():
    """Ch·∫°y migration"""
    print("üöÄ MIGRATION DATABASE - TH√äM INDEXES")
    print("=" * 50)
    
    try:
        add_database_indexes()
        show_database_info()
        
        print("\n‚úÖ Migration ho√†n th√†nh!")
        print("üí° Database ƒë√£ ƒë∆∞·ª£c t·ªëi ∆∞u h√≥a v·ªõi indexes.")
        
    except Exception as e:
        print(f"\n‚ùå L·ªói migration: {e}")

if __name__ == "__main__":
    main()
